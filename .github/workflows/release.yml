name: release
on:
  push:
    # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
    #   - 'v*'
    branches:
      - main
    #   - dev
    # package.json 更改后再触发发布
    # paths: [ "package.json" ]
jobs:
  buildStatic:
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/app/package.json
          property: version

      - id: release_check
        run: |
          echo "::set-output name=RELEASE_STATUS::$(curl -I -m 10 -o /dev/null -s -w %{http_code} https://github.com/team-ide/electron-server-demo/releases/tag/v${{ steps.release_version.outputs.value }})"

      #      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
      #        run: cd release && zip -q -r teamide-linux-x64.zip teamide-linux-x64
      #      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
      #        run: cd release && zip -q -r teamide-server-linux-x64.zip teamide-server-linux-x64
      #      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
      #        run: cd release && zip -q -r teamide-darwin-x64.zip teamide-darwin-x64
      #      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
      #        run: cd release && zip -q -r teamide-windows-x64.zip teamide-windows-x64

      # 读取发布说明
      - name: Read Release Description
        id: release_body
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: juliangruber/read-file-action@v1
        with:
          path: RELEASE.md

      # 发布
      - name: Create Release
        id: create_release
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{steps.release_version.outputs.value}}
          release_name: ${{steps.release_version.outputs.value}}
          body: ${{steps.release_body.outputs.content}}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布

  buildMAC:
    needs: buildStatic
    runs-on: macos-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/app/package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.19"

      # 将静态资源打包html.go
      - run: |
          cd server
          go build -ldflags="-w -s -X server.version=${{ steps.release_version.outputs.value }}" -o ../statics/server/server .

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Electron Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x statics/server/server
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --mac -p always

  buildLinux:
    needs: buildStatic
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/app/package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.19"

      # 将静态资源打包html.go
      - run: |
          cd server
          go build -ldflags="-w -s -X server.version=${{ steps.release_version.outputs.value }}" -o ../statics/server/server .

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Electron Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x statics/server/server
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --linux -p always

  buildWindow:
    needs: buildStatic
    runs-on: windows-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v2

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/app/package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "^1.19"

      # 将静态资源打包html.go
      # -H=windowsgui
      - run: |
          cd server
          go build -ldflags="-w -s -X server.version=${{ steps.release_version.outputs.value }}" -o ../statics/server/server.exe .

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Electron Build
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x statics/server/server
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --win -p always